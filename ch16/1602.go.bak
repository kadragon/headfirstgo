package main

import (
	"log"
	"os"
	"text/template"
)

func check(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

func excuteTemplate(text string, data interface{}) {
	tmpl, err := template.New("test").Parse(text)
	check(err)
	err = tmpl.Execute(os.Stdout, data)
	check(err)
}

func main() {
	text := "Here's my template!\n"
	tmpl, err := template.New("test").Parse(text)
	check(err)
	err = tmpl.Execute(os.Stdout, nil)
	check(err)

	templateText := "Template start\nAction: {{.}}\nTemplate end\n"
	tmpl, err = template.New("test").Parse(templateText)
	check(err)

	err = tmpl.Execute(os.Stdout, "ABC")
	check(err)
	err = tmpl.Execute(os.Stdout, 42)
	check(err)

	excuteTemplate("Dot is: {{.}}!\n", "ABC")

	excuteTemplate("start {{if .}}Dot is true!{{end}} finish\n", true)
	excuteTemplate("start {{if .}}Dot is true!{{end}} finish\n", false)

	templateText = "Before loop: {{.}}\n{{range .}}In Loop: {{.}}\n{{end}}After loop: {{.}}\n"
	excuteTemplate(templateText, []string{"do", "re", "mi"})
	excuteTemplate(templateText, []string{})

	type Part struct {
		Name  string
		Count int
	}
	templateText = "Name: {{.Name}}\nCount: {{.Count}}\n"
	excuteTemplate(templateText, Part{Name: "Fuses", Count: 5})
}
